{"openapi": "3.0.2", "info": {"title": "cs-insights-prediction-endpoint", "version": "0.1.0"}, "paths": {"/api/v0/status/": {"get": {"tags": ["Status"], "summary": "Read Root", "description": "Status endpoint of the API.\n\nReturns:\n    Dict[str, str]: A message of the current status and version.", "operationId": "read_root_api_v0_status__get", "responses": {"200": {"description": "Status of the backend.", "content": {"application/json": {"schema": {}}}}}}}, "/api/v0/topics/": {"post": {"tags": ["Topics"], "summary": "Topic For Papers", "description": "Generate topics for a set of papers.\n\nArgs:\n    paper (PaperModel): The paper objects to analyse.\n\nReturns:\n    TopicResponseModel: The response object for the computed topics.", "operationId": "topic_for_papers_api_v0_topics__post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaperModel"}}}, "required": true}, "responses": {"200": {"description": "Topics for a single paper.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TopicResponseModel"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v0/models/implemented": {"get": {"tags": ["Model"], "summary": "List All Implemented Models", "description": "Endpoint for getting a list of all implemented models", "operationId": "list_all_implemented_models_api_v0_models_implemented_get", "responses": {"200": {"description": "Lists all currently available(implemented) models", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StorageControllerListReponse"}}}}}}}, "/api/v0/models/{current_modelID}": {"get": {"tags": ["Model"], "summary": "List All Function Calls", "description": "Endpoint for getting a list of all implemented function calls", "operationId": "list_all_function_calls_api_v0_models__current_modelID__get", "parameters": [{"required": true, "schema": {"title": "Current Modelid", "type": "string"}, "name": "current_modelID", "in": "path"}], "responses": {"200": {"description": "Lists all function calls of the current model", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModelSpecificFunctionCallResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["Model"], "summary": "Getinformation", "description": "Gets info out of post data", "operationId": "getInformation_api_v0_models__current_modelID__post", "parameters": [{"required": true, "schema": {"title": "Current Modelid", "type": "string"}, "name": "current_modelID", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GenericInputModel"}}}, "required": true}, "responses": {"200": {"description": "Runs a function", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GenericOutputModel"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["Model"], "summary": "Deletemodel", "description": "Endpoint for deleting a model", "operationId": "deleteModel_api_v0_models__current_modelID__delete", "parameters": [{"required": true, "schema": {"title": "Current Modelid", "type": "string"}, "name": "current_modelID", "in": "path"}], "responses": {"200": {"description": "Delete the current model", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModelDeletionResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v0/models/": {"get": {"tags": ["Model"], "summary": "List All Created Models", "description": "Endpoint for getting a list of all created models", "operationId": "list_all_created_models_api_v0_models__get", "responses": {"200": {"description": "Lists all currently created models", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StorageControllerListReponse"}}}}}}, "post": {"tags": ["Model"], "summary": "Create Model", "description": "Endpoint for creating a model\n\nArguments:\n    modelCreationRequest (ModelCreationRequest): A ModelCreationRequest used for the creation\n                                             of the actual model\n\nReturns:\n    dict: Either an error or the created model id", "operationId": "create_model_api_v0_models__post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModelCreationRequest"}}}, "required": true}, "responses": {"201": {"description": "Creates a model", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ModelCreationResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v0/hosts/": {"get": {"tags": ["Hosts"], "summary": "List All Remote Hosts", "description": "List all remote hosts\n\nReturns:\n    RemoteHostListResponse: List of all currently registered remote hosts.", "operationId": "list_all_remote_hosts_api_v0_hosts__get", "responses": {"200": {"description": "Get all currently available hosts", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RemoteHostListResponse"}}}}}}, "post": {"tags": ["Hosts"], "summary": "Add Remote Host", "description": "Add a remote host to the remote host list\n\nArgs:\n    remote_host (RemoteHost): The remote host to add\n\nReturns:\n    RemoteHost: The added remote host", "operationId": "add_remote_host_api_v0_hosts__post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RemoteHost"}}}, "required": true}, "responses": {"200": {"description": "Get all currently available hosts", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RemoteHost"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["Hosts"], "summary": "Delete Remote Host", "description": "Delete a remote host from the remote host list\n\nArgs:\n    remote_host (RemoteHost): The remote host to delete\n\nReturns:\n    RemoteHost: The deleted remote host", "operationId": "delete_remote_host_api_v0_hosts__delete", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RemoteHostDeleteRequest"}}}, "required": true}, "responses": {"200": {"description": "Get all currently available hosts", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RemoteHostDeleteRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v0/auth/login": {"post": {"tags": ["Auth"], "summary": "Login", "description": "Login routine\n\nArguments:\n    user (UserModel): user credentials at least (email, password)\n    settings (Settings): Settings object; Populatet from .env file\n\nReturns:\n    TokenModel: a JWT given a valid user from the NLP-Land-Backend", "operationId": "login_api_v0_auth_login_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserLoginModel"}}}, "required": true}, "responses": {"200": {"description": "Trigger login procedure", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokenModel"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v0/auth/refresh": {"post": {"tags": ["Auth"], "summary": "Refresh", "description": "Generates a new token without the need of logging in again\n\nArguments:\n    user(UserModel): a user depending on the supplied token\n    settings (Settings): Settings object; Populatet from .env file\n\nReturns:\n    TokenModel: a JWT given a valid user from the NLP-Land-Backend", "operationId": "refresh_api_v0_auth_refresh_post", "responses": {"200": {"description": "Trigger login procedure", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokenModel"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}}, "components": {"schemas": {"ExtractionMethod": {"title": "ExtractionMethod", "enum": ["grobid", "anthology", "rulebased"], "type": "string", "description": "Which extraction method to use.\n\nArgs:\n    str ([type]): The type of this enum.\n    Enum ([Any]): The parent class of this enum."}, "GenericInputModel": {"title": "GenericInputModel", "required": ["inputData", "functionCall"], "type": "object", "properties": {"inputData": {"title": "Inputdata", "type": "object"}, "functionCall": {"title": "Functioncall", "type": "string"}}, "description": "Input for a generic model"}, "GenericOutputModel": {"title": "GenericOutputModel", "required": ["outputData"], "type": "object", "properties": {"outputData": {"title": "Outputdata", "type": "object"}}, "description": "Output for a generic model"}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "ModelCreationRequest": {"title": "ModelCreationRequest", "required": ["modelType", "modelSpecification"], "type": "object", "properties": {"modelType": {"title": "Modeltype", "type": "string"}, "modelSpecification": {"title": "Modelspecification", "type": "object"}}, "description": "Response model for creating a Model\nThis contains the modelType (e.g., lda) and the model specification\nwhich should be parsable to the modelTypes pydentic schema."}, "ModelCreationResponse": {"title": "ModelCreationResponse", "required": ["modelID"], "type": "object", "properties": {"modelID": {"title": "Modelid", "type": "string"}}, "description": "Response Model for the successfull creation of a model"}, "ModelDeletionResponse": {"title": "ModelDeletionResponse", "required": ["modelID"], "type": "object", "properties": {"modelID": {"title": "Modelid", "type": "string"}}, "description": "Response Model for the successfull deletion of a model"}, "ModelSpecificFunctionCallResponse": {"title": "ModelSpecificFunctionCallResponse", "required": ["functionCalls"], "type": "object", "properties": {"functionCalls": {"title": "Functioncalls", "type": "array", "items": {"type": "string"}}}, "description": "Response model for model specific function calls"}, "PaperModel": {"title": "PaperModel", "required": ["id", "title", "abstractText", "abstractExtractor", "typeOfPaper", "shortOrLong", "atMainConference", "isSharedTask", "isStudentPaper", "doi", "preProcessingGitHash", "pdfUrl", "absUrl", "datePublished", "citationInfoTimestamp", "citedBy", "authors", "firstAuthor", "venues", "createdBy", "createdAt", "dblpId"], "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "title": {"title": "Title", "type": "string"}, "abstractText": {"title": "Abstracttext", "type": "string"}, "abstractExtractor": {"$ref": "#/components/schemas/ExtractionMethod"}, "typeOfPaper": {"$ref": "#/components/schemas/TypeOfPaper"}, "shortOrLong": {"$ref": "#/components/schemas/ShortLong"}, "atMainConference": {"title": "Atmainconference", "type": "boolean"}, "isSharedTask": {"title": "Issharedtask", "type": "boolean"}, "isStudentPaper": {"title": "Isstudentpaper", "type": "boolean"}, "doi": {"title": "Doi", "type": "string"}, "preProcessingGitHash": {"title": "Preprocessinggithash", "type": "string"}, "pdfUrl": {"title": "Pdfurl", "maxLength": 65536, "minLength": 1, "type": "string", "format": "uri"}, "absUrl": {"title": "Absurl", "maxLength": 65536, "minLength": 1, "type": "string", "format": "uri"}, "datePublished": {"title": "Datepublished", "type": "string"}, "citationInfoTimestamp": {"title": "Citationinfotimestamp", "type": "string"}, "citedBy": {"title": "Citedby", "type": "array", "items": {"type": "string"}}, "authors": {"title": "Authors", "type": "array", "items": {"type": "string"}}, "firstAuthor": {"title": "Firstauthor", "type": "string"}, "venues": {"title": "Venues", "type": "array", "items": {"type": "string"}}, "createdBy": {"title": "Createdby", "type": "string"}, "createdAt": {"title": "Createdat", "type": "string"}, "dblpId": {"title": "Dblpid", "type": "string"}}, "description": "The model for a paper. Should be identical to the NLP-Land-backend.\n\nArgs:\n    BaseModel (Any): Base class of FastAPI models.", "example": {"id": "5136bc054aed4daf9e2a43203", "title": "Attention is all you need", "abstractText": "The dominant sequence transduction models are based on complex recurrent or convolutional neural networks in an encoder-decoder configuration. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-to-German translation task, improving over the existing best results, including ensembles by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.8 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature. We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data.", "abstractExtractor": "grobid", "typeOfPaper": "conference", "shortOrLong": "long", "atMainConference": true, "isSharedTask": false, "isStudentPaper": false, "doi": "10.5555/3295222.3295349", "preProcessingGitHash": "955ef880159216a23b7bfd13d3fb56eaa54b4113", "pdfUrl": "https://dl.acm.org/doi/pdf/10.5555/3295222.3295349", "absUrl": "https://dl.acm.org/doi/10.5555/3295222.3295349", "datePublished": "2022-08-11T15:57:00.272628", "citationInfoTimestamp": "2022-08-11T15:57:00.272644", "citedBy": ["5136bc054aed4daf9e2a1231", "5136bc054aed4daf9e2a1239", "5136bc054aed4daf9e2a1237", "5136bc054aed4daf9e2a1234", "5136bc054aed4daf9e2a1232", "5136bc054aed4daf9e2a1235"], "authors": ["5126bc054aed4daf9e2a1232", "5126bc054aed4daf9e2a1233", "5126bc054aed4daf9e2a1234", "5126bc054aed4daf9e2a1235", "5126bc054aed4daf9e2a1236"], "firstAuthor": "5126bc054aed4daf9e2a1232", "venues": ["5126bc054aed4daf9e2a1237", "5126bc054aed4daf9e2a1238", "5126bc054aed4daf9e2a1239"], "createdBy": "507f1f77bcf86cd799439011", "createdAt": "2022-08-11T15:57:00.272647", "dblpId": "whatever/id/it/is"}}, "RemoteHost": {"title": "RemoteHost", "required": ["ip", "port", "models", "created_models"], "type": "object", "properties": {"ip": {"title": "Ip", "type": "string"}, "port": {"title": "Port", "type": "string"}, "models": {"title": "Models", "type": "array", "items": {"type": "string"}}, "created_models": {"title": "Created Models", "type": "array", "items": {"type": "string"}}}, "description": "The model for a Remote Host\n\nArgs:\n    BaseModel (Any): Base class of FastAPI models."}, "RemoteHostDeleteRequest": {"title": "RemoteHostDeleteRequest", "required": ["ip"], "type": "object", "properties": {"ip": {"title": "Ip", "type": "string"}}, "description": "Request/Response model for host deletion requests"}, "RemoteHostListResponse": {"title": "RemoteHostListResponse", "required": ["remote_host_list"], "type": "object", "properties": {"remote_host_list": {"title": "Remote Host List", "type": "array", "items": {"$ref": "#/components/schemas/RemoteHost"}}}, "description": "Response model for host listing all hosts"}, "ShortLong": {"title": "ShortLong", "enum": ["short", "long", "unknown"], "type": "string", "description": "Which size of paper to use.\n\nArgs:\n    str ([type]): The type of this enum.\n    Enum ([Any]): The parent class of this enum."}, "StorageControllerListReponse": {"title": "StorageControllerListReponse", "required": ["models"], "type": "object", "properties": {"models": {"title": "Models", "type": "array", "items": {"type": "string"}}}, "description": "Response model for both\n    - GET /\n    - GET /implemented\nwhich returns a list of models"}, "TokenModel": {"title": "TokenModel", "required": ["access_token", "token_type"], "type": "object", "properties": {"access_token": {"title": "Access Token", "type": "string"}, "token_type": {"title": "Token Type", "type": "string"}}, "description": "Model used for JWT-responses\n\nAttributes:\n    acces_token (str): the actual token\n    token_type (str): this will always be bearer"}, "TopicModel": {"title": "TopicModel", "required": ["id", "name", "keywords", "score", "paper_ids"], "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "name": {"title": "Name", "type": "string"}, "keywords": {"title": "Keywords", "type": "array", "items": {"type": "string"}}, "score": {"title": "Score", "type": "number"}, "paper_ids": {"title": "Paper Ids", "type": "array", "items": {"type": "string"}}}, "description": "A single topic.\n\nArgs:\n    BaseModel (Any): Base class of FastAPI models."}, "TopicResponseModel": {"title": "TopicResponseModel", "required": ["topics"], "type": "object", "properties": {"topics": {"title": "Topics", "type": "array", "items": {"$ref": "#/components/schemas/TopicModel"}}}, "description": "The model for a topic.\n\nArgs:\n    BaseModel (Any): Base class of FastAPI models.", "example": {"topics": [{"id": "5136bc054aed4daf9e2a1237", "name": "Topic 1", "score": 0.5, "keywords": ["keyword 1", "keyword 2"], "paper_ids": ["5136bc054aed4daf9e2a1239", "5136bc054aed4daf9e2a1238"]}]}}, "TypeOfPaper": {"title": "TypeOfPaper", "enum": ["journal", "conference", "demo", "workshop", "poster", "tutorial", "doctoral_consortium", "other"], "type": "string", "description": "Which type of paper to use.\n\nArgs:\n    str ([type]): The type of this enum.\n    Enum ([Any]): The parent class of this enum."}, "UserLoginModel": {"title": "UserLoginModel", "required": ["email", "password"], "type": "object", "properties": {"email": {"title": "Email", "type": "string"}, "password": {"title": "Password", "type": "string"}}, "description": "The model for a user login. This model contains only\nthe fields that are submitted on a login\n\nArguments:\n    BaseModel(Any): Base class of FastAPI modesl.\n\nAttributes:\n    email (str): email of the user\n    password (str): password of the user", "example": {"email": "admin@nlp.de", "password": "12345"}}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"type": "string"}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}}, "securitySchemes": {"OAuth2PasswordBearer": {"type": "oauth2", "flows": {"password": {"scopes": {}, "tokenUrl": "/auth/service"}}}}}}